name: package

on:
  push:
    branches:
      - master
      - develop
    tags:
      - 'v*.*'
  pull_request:
    branches:
      - master
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    container: python:3.7
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: python -m pip install .[test]
    - name: Test
      run: python -m unittest -v

  sphinx:
    runs-on: ubuntu-latest
    container: sphinxdoc/sphinx-latexpdf
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install
        run: python -m pip install .[docs]
      - name: Build HTML
        run: make html
        working-directory: docs
      - name: Upload HTML
        uses: actions/upload-artifact@v1
        with:
          name: pages
          path: docs/build/html
      - name: Build latex
        run: make latexpdf
        working-directory: docs
      - name: Upload pdf
        uses: actions/upload-artifact@v1
        with:
          name: manual
          path: docs/build/latex/spectralanalysisformodalparameterlinearestimate.pdf

  release-create:
    if: ${{ startsWith( github.ref , 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    needs: [test, sphinx]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: ${{ contains( github.ref , 'dev' ) }}
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  upload:
    runs-on: ubuntu-latest
    container: python:3.7
    needs: [release-create]
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: python setup.py sdist
    - name: Install Twine
      run: python -m pip install twine
    - name: Upload
      run: python -m twine upload --verbose dist/*
      env:
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        TWINE_REPOSITORY: ${{ secrets.TWINE_REPOSITORY }}
        TWINE_NON_INTERACTIVE: 1
