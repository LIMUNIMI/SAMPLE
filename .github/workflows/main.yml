name: main

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pyversion: [
          "3.6",
          "3.7",
          "3.8",
          "3.9",
        ]
    container: python:${{ matrix.pyversion }}
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: python -m pip install .[test,plots] --use-feature=in-tree-build
    - name: Test
      run: python -m unittest -v

  coverage:
    runs-on: ubuntu-latest
    container: python:3.9
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: python -m pip install .[test,cov,plots] --use-feature=in-tree-build
    - name: Run coverage
      run: python -m coverage run -m unittest
    - name: Make coverage JSON
      run: python -m coverage json
    - name: Download badge
      run: wget $(python -m chromatictools.badges coverage) -O badge.svg
    - name: Upload svg
      uses: actions/upload-artifact@v1
      with:
        name: coverage_badge
        path: badge.svg
    - name: Deploy badge
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: exuanbo/actions-deploy-gist@v1
      with:
        token: ${{ secrets.GIST_TOKEN }}
        gist_id: fb3ce2e55493c80839ca8985d0c38146
        gist_file_name: lim-sample-coverage-badge.svg
        file_path: badge.svg

  lint:
    runs-on: ubuntu-latest
    container: python:3.9
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: python -m pip install .[lint] --use-feature=in-tree-build
    - name: Download pylintrc
      run: make pylintrc
      working-directory: docs
    - name: Run pylint
      run: pylint sample tests --rcfile docs/pylintrc --exit-zero > pylint.txt
    - name: Download badge
      run: wget $(python -m chromatictools.badges pylint) -O badge.svg
    - name: Upload svg
      uses: actions/upload-artifact@v1
      with:
        name: pylint_badge
        path: badge.svg
    - name: Deploy badge
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: exuanbo/actions-deploy-gist@v1
      with:
        token: ${{ secrets.GIST_TOKEN }}
        gist_id: fb3ce2e55493c80839ca8985d0c38146
        gist_file_name: lim-sample-pylint-badge.svg
        file_path: badge.svg

  sphinx:
    runs-on: ubuntu-latest
    container: sphinxdoc/sphinx
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install
        run: python -m pip install .[docs,plots] --use-feature=in-tree-build
      - name: Build HTML
        run: make html
        working-directory: docs
      - name: Upload HTML
        uses: actions/upload-artifact@v1
        with:
          name: pages
          path: docs/build/html

  release-create:
    if: ${{ startsWith( github.ref , 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    needs: [test, coverage, lint, sphinx, pyinstaller-build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: ${{ contains( github.ref , 'dev' ) || contains( github.ref , 'a' ) || contains( github.ref , 'b' ) || contains( github.ref , 'rc' ) }}
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  pages-deploy:
    runs-on: ubuntu-latest
    needs: [sphinx, release-create]
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: pages
          path: pages
      - name: No Jekyll in pages
        run: touch pages/.nojekyll
      - name: Deploy pages
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: pages

  pypi-upload:
    runs-on: ubuntu-latest
    container: python:3.7
    needs: release-create
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: python setup.py sdist
    - name: Install Twine
      run: python -m pip install twine --use-feature=in-tree-build
    - name: Upload
      run: python -m twine upload --verbose dist/*
      env:
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        TWINE_REPOSITORY: ${{ secrets.TWINE_REPOSITORY }}
        TWINE_NON_INTERACTIVE: 1

  pyinstaller-build:
    strategy:
      matrix:
        os: [win]
        include:
          - os: win
            runner: windows-latest
            exe_path: ./dist/SAMPLE.exe
    needs: test
    runs-on: ${{ matrix.runner }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: "3.9"
    - name: Install
      run: python -m pip install .[gui,installer] --use-feature=in-tree-build
    - name: Build
      run: python pyinstaller.py
    - name: Upload executable
      uses: actions/upload-artifact@v1
      with:
        name: SAMPLE_${{ matrix.os }}
        path: ${{ matrix.exe_path }}

  pyinstaller-upload:
    strategy:
      matrix:
        os: [win]
        include:
          - os: win
            exe_path: SAMPLE.exe
    runs-on: ubuntu-latest
    needs: [release-create, pyinstaller-build]
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: SAMPLE_${{ matrix.os }}
        path: .
    - uses: actions/setup-python@v2
      with:
        python-version: "3.9"
    - name: Install
      run: python -m pip install . --use-feature=in-tree-build
    - name: Set version name
      run: echo "SAMPLE_VERSION=$(python -c 'import sample; print(sample.__version__)')" >> $GITHUB_ENV
    - name: Zip executable
      run: zip SAMPLE.zip ${{ matrix.exe_path }}
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release-create.outputs.upload_url }}
        asset_path: SAMPLE.zip
        asset_name: SAMPLE_${{ matrix.os }}_${{ env.SAMPLE_VERSION }}.zip
        asset_content_type: application/zip
